package com.kingjellyfishii.hivemcstats;

import java.util.logging.Logger;

import com.kingjellyfishii.hivemcstats.proxy.CommonProxy;
import com.kingjellyfishii.hivemcstats.util.referance;
import com.mojang.realmsclient.gui.ChatFormatting;

import net.minecraftforge.client.ClientCommandHandler;
import net.minecraftforge.client.event.ClientChatReceivedEvent;
import net.minecraftforge.common.MinecraftForge;
import net.minecraft.client.Minecraft;
import net.minecraft.util.text.ITextComponent;
import net.minecraft.util.text.TextComponentString;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

@Mod(modid = referance.MOD_ID, name = referance.NAME, version = referance.VERSION)
public class Main {
	
	private static Logger logger;
	private static Minecraft mc;
	private int done = 0;
	private static boolean getStats = false;
	private static boolean lookup_player = false;
	private static int pos = 0;
	
	private String[] online_players;
	private String player;
	private String victories;
	private String games;
	private String kills;
	private String deaths;
	private String beds;
	
	@Instance
	public static Main instance;
	
	@SidedProxy(clientSide = referance.CLIENT_PROXY_CLASS, serverSide = referance.COMMON_PROXY_CLASS)
	public static CommonProxy proxy;
	

	@EventHandler
	public static void PreInit(FMLPreInitializationEvent event) {
		
	}
	
	@EventHandler
	public static void init(FMLInitializationEvent event) {
		MinecraftForge.EVENT_BUS.register(instance);
		ClientCommandHandler.instance.registerCommand(new CommandGet());
		ClientCommandHandler.instance.registerCommand(new CommandToggle());
	}
	@EventHandler
	public static void PostInit(FMLPostInitializationEvent event) {
		mc = Minecraft.getMinecraft();
	}
	
	private static String pvpcolour(double kd) {
		if (kd < 0.8) {
	        return "" + ChatFormatting.DARK_GREEN;
		}
	    if (kd < 1.2) {
	        return "" + ChatFormatting.YELLOW;
	    }
	    if (kd >= 1.2) {
	        return "" + ChatFormatting.DARK_RED;
	    }
	    return "";
	}
	
	private static String generalcolour(double percent) {
		if (percent < 30) {
	        return "" + ChatFormatting.DARK_GREEN;
		}
	    if (percent < 40) {
	        return "" + ChatFormatting.YELLOW;
	    }
	    if (percent >= 40) {
	        return "" + ChatFormatting.DARK_RED;
	    }
	    return "";
	}
	
	private static String rushercolour(double beds) {
		if (beds < 0.5) {
	        return "" + ChatFormatting.DARK_GREEN;
		}
	    if (beds < 0.8) {
	        return "" + ChatFormatting.YELLOW;
	    }
	    if (beds >= 0.8) {
	        return "" + ChatFormatting.DARK_RED;
	    }
		return "";
	}
	
	@SubscribeEvent
	public void onChat(ClientChatReceivedEvent e) {
		if (!getStats) {
			return;
		}
		ITextComponent c = e.getMessage();
		String text = c.getFormattedText();
		String result = text.replaceAll("[^\\x00-\\x7F]", "");
		//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + "IT WORLS !!!!!" + text));
		
		//get list of players
		//mc.player.sendMessage(new TextComponentString("test: " + result));
		if (result.contains("Online spectators")) {
			//mc.player.sendMessage(new TextComponentString("test"));
			String res = result.split(":")[1];
			mc.player.sendMessage(new TextComponentString("Test: " + res));
			online_players = res.replaceAll(".", "").split(", ");
			e.setCanceled(true);
		}
		
		//cancel all events that we don't need
		if (result.contains("players online")) {
			e.setCanceled(true);
		}
		
		if (result.contains("Online participants")) {
			e.setCanceled(true);
		}
		
		if (result.contains("Points: ")) {
			e.setCanceled(true);
		}
		
		if (result.contains("Team Eliminated")) {
			e.setCanceled(true);
		}

		if (result.contains("https://hivemc.com/player/")) {
			e.setCanceled(true);
		}
		
		//get info
		if (result.contains("'s Stats")) { 
			String[] playername_f = result.split("'")[0].split(" ");
			player = playername_f[playername_f.length - 1];
			e.setCanceled(true);
		}
		
		if (result.contains("Victories: ")) {
			victories = result.split(":")[1].replaceAll("[^\\d.]", "");
			e.setCanceled(true);
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + victories));
		}
		
		if (result.contains("Games Played: ")) {
			games = result.split(":")[1].replaceAll("[^\\d.]", "");
			e.setCanceled(true);
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + games));
		}
		
		if (result.contains("Kills: ")) {
			kills = result.split(":")[1].replaceAll("[^\\d.]", "");
			e.setCanceled(true);
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + kills));
		}
		
		if (result.contains("Deaths: ")) {
			deaths = result.split(":")[1].replaceAll("[^\\d.]", "");
			e.setCanceled(true);
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + deaths));
		}
		
		if (result.contains("Beds Destroyed: ")) {
			beds = result.split(":")[1].replaceAll("[^\\d.]", "");
			done = 1;
			e.setCanceled(true);
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + beds));
		}
		
		//display info
		if (done == 1) {
			done = 0;
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + victories));
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + games));
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + kills));
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + deaths));
			//mc.player.sendMessage(new TextComponentString(ChatFormatting.DARK_GREEN + beds));
			double kills_per_death = ((double)Integer.parseInt(kills) / Integer.parseInt(deaths));
		    double percent_won = ((double)Integer.parseInt(victories) / Integer.parseInt(games));
		    double beds_per_game = ((double)Integer.parseInt(beds) / Integer.parseInt(games));
		    String state = "safe";
			String reason = "";
			String colour_pvp = "" + ChatFormatting.GREEN;
			String colour_general = "" + ChatFormatting.GREEN;
			String colour_rusher = "" + ChatFormatting.GREEN;
				    
			if (kills_per_death > 0.6) {
		        if (state != "safe") {
		            state = ChatFormatting.DARK_RED + "EXTREME CAUTION" + ChatFormatting.RESET;
		        } else {
		            state = ChatFormatting.YELLOW + "DANGEROUS" + ChatFormatting.RESET;
		        }
		        colour_pvp = pvpcolour(kills_per_death);

		        if (reason == "") {
		            reason = colour_pvp + "PVP" + ChatFormatting.RESET;
		        } else {
		            reason += ", " + colour_pvp + "PVP" + ChatFormatting.RESET;
		        }
			}
		    if (percent_won > 20) {
		    	if (state != "safe") {
		            state = ChatFormatting.DARK_RED + "EXTREME CAUTION" + ChatFormatting.RESET;
		        } else {
		            state = ChatFormatting.YELLOW + "DANGEROUS" + ChatFormatting.RESET;
		        }
		        colour_general = generalcolour(percent_won);

		        if (reason == "") {
				    reason = colour_general + "General" + ChatFormatting.RESET;
				} else {
				    reason += ", " + colour_general + "General" + ChatFormatting.RESET;
				}
		    }
		    if (beds_per_game > 0.2) {
		    	if (state != "safe") {
		            state = ChatFormatting.DARK_RED + "EXTREME CAUTION" + ChatFormatting.RESET;
		        } else {
		            state = ChatFormatting.YELLOW + "DANGEROUS" + ChatFormatting.RESET;
		        }
		        colour_rusher = rushercolour(beds_per_game);

		        if (reason == "") {
				    reason = colour_rusher + "Rusher" + ChatFormatting.RESET;
				} else {
				    reason += ", " + colour_rusher + "Rusher" + ChatFormatting.RESET;
				}
		    }
		    Omp
		    if (state == "safe") {
		    	state = ChatFormatting.GREEN + "safe" + ChatFormatting.RESET;
		    }
		    
		    String line1 = "Player " + player;
		    String line2 = "State: " + state;
		    String line3 = "Reason: " + reason;
		    String line4 = "Games won %: " + colour_general + String.valueOf(percent_won) + ChatFormatting.RESET;
		    String line5 = "Beds per game: " + colour_rusher + String.valueOf(beds_per_game) + ChatFormatting.RESET;
		    String line6 = "Kills per death: " + colour_pvp + String.valueOf(kills_per_death) + ChatFormatting.RESET;
		    
		    mc.player.sendMessage(new TextComponentString(line1));
		    mc.player.sendMessage(new TextComponentString(line2));
		    mc.player.sendMessage(new TextComponentString(line3));
		    mc.player.sendMessage(new TextComponentString(line4));
		    mc.player.sendMessage(new TextComponentString(line5));
		    mc.player.sendMessage(new TextComponentString(line6));
		    //try {
		    //	Thread.sleep(1000);
		    //} catch (InterruptedException exception) {
		    // 	exception.printStackTrace();
			//}
		}
		
		if (lookup_player) {
			for (int i = 0; i < online_players.length; i++) {
				mc.player.sendMessage(new TextComponentString(online_players[i]));
			}
			if (pos >= online_players.length) {
				lookup_player = false;
				pos = 0;
				return;
			}
			try {
		    	Thread.sleep(1000);
		    } catch (InterruptedException exception) {
		     	exception.printStackTrace();
			}
			mc.player.sendChatMessage("/stats " + online_players[pos]);
			pos += 1;
		}
	}
	
	public static Main instance() {
		return instance;
	}
	
	public static boolean toggle_getStats() {
		return (getStats = !getStats);
	}
	
	public static boolean toggle_lookup() {
		return (lookup_player = !lookup_player);
	}
}
